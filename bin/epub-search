require 'pathname'
require 'yaml'
require 'thor'
require 'epub/search'

Class.new(Thor) {
  APP_DIR = File.expand_path('../../app', __FILE__)
  DEFAULT_CONFIG = {
    :config_path => File.join(Dir.home, '.epub-search/config.yaml'),
    :db_dir      => File.join(Dir.home, '.epub-search/db')
  }
  Dir["#{APP_DIR}/*.rb"].each do |path|
    require path
  end

  class << self
    def exit_on_failure?
      true
    end
  end

  class_option 'config', :type => :string, :aliases => '-c', :default => nil, :desc => 'path to config file'

  method_option 'force', :type => :boolean, :aliases => '-f', :default => false, :desc => 'Overwrite config and database files'
  desc 'init [DB_DIR]', 'setup database'
  def init(db_dir=config[:db_dir])
    Init.new(db_dir).run(options[:force])
  end

  desc 'add FILE', 'add FILE to database'
  def add(file)
    Add.new(File.join(config[:db_dir], Init::FILE_NAME), file).run
  end

  desc 'search WORD', 'search word from database'
  method_option :xml, :type => :boolean,
                      :desc => 'search word from documents including tags'
  def search(word)
    Search.new(File.join(config[:db_dir], Init::FILE_NAME), word).run
  end

  desc 'watch DIRECTORY [DIRECTORY ...]', 'index all of EPUB files in DIRECTORY'
  def watch(*directories)
    directories = config[:directories] if directories.empty?
    Watch.new(File.join(config[:db_dir], Init::FILE_NAME), directories).run
  end

  desc 'remove FILE', 'remove FILE from database'
  def remove(file)
    Remove.new(File.join(config[:db_dir], Init::FILE_NAME), file).run
  end

  private

  def config
    return @config if @config

    config_file = options[:config] ||
      (File.file?('.epub-searchrc') ? '.epub-searchrc'
                                    : File.join(Dir.home, '.epub-search', 'epub-searchrc'))
    conf = YAML.load_file(config_file) if File.file? config_file.to_s

    @config = DEFAULT_CONFIG.merge(conf || {})
  end
}.start
